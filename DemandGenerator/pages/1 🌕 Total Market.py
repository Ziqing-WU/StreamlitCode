import pandas as pd
import glob
import os
import streamlit as st
import geopandas as gpd
import pyproj
import plotly.express as px
import numpy as np
from datetime import date

st.set_page_config(
    layout='wide',
    initial_sidebar_state='auto',
    page_icon='ğŸŒ•'
)

current_year = int(st.text_input("Vehicle Data imported for year ?", '2022') )

st.markdown(
    """
    # Total Market
    """
)

csv_file = st.file_uploader(
    'Upload a csv file containing the following information of vehicles: Registration Country, Registration Year, Registration City, Manufacturer, Model, TVV, Engine Power, Engine Type.'
    )

st.markdown(
    """
    If no file uploaded, a test dataset is used, which is generated by randomly sampling a national database of vehicle fleet in France. The sampling is only conducted for several cities (Paris, Toulouse, OrlÃ©ans, Albi, Saint-Denis-de-l'HÃ´tel).
    """
)

st.markdown(
    """
    ## Geographical Distribution
    """
)

if not csv_file:
    folder_path = r"C:\Users\zwu\OneDrive - IMT Mines Albi\Documents\Data\DemandForecasting\Vehicles\Simulated_car_registration"
    all_files = glob.glob(os.path.join(folder_path, 'year*.csv'))
    df = pd.concat((pd.read_csv(f) for f in all_files), ignore_index=True)
    df = df.iloc[:,1:]
    df = df.astype({'Code_commune':str})
    df = df[['Country', 'Year', 'Code_commune', 'Mh', 'Cn', 'T', 'Va', 'Ve', 'Ft', 'ep (KW)']]


fp = r'C:\Users\zwu\OneDrive - IMT Mines Albi\Documents\Data\DemandForecasting\Ref-1-CodeGeo\ADMIN-EXPRESS-COG_3-1__SHP__FRA_WM_2022-04-15\ADMIN-EXPRESS-COG\1_DONNEES_LIVRAISON_2022-04-15\ADECOG_3-1_SHP_WGS84G_FRA\COMMUNE.shp'

@st.cache
def construct_map(file_path):
    map_df = gpd.read_file(file_path)
    map_df.to_crs(pyproj.CRS.from_epsg(4326), inplace=True)
    return map_df[['INSEE_COM', 'geometry']].set_index('INSEE_COM')

map_df = construct_map(fp)
group_commune_df = df.groupby('Code_commune').count().iloc[:, :1].rename(columns={'Country':'Num Vehicles'})
group_brand_df = df.groupby(['Mh', 'Cn', 'Code_commune']).count().iloc[:, :1].rename(columns={'Country':'Num Vehicles'}).sort_values(by='Num Vehicles', ascending=False)
group_brand_df = group_brand_df.reset_index(level=['Cn', 'Code_commune'])

df_merged = map_df.merge(group_commune_df, left_index=True, right_index=True).sort_values(by='Num Vehicles', ascending=False)    

geo_filters = st.multiselect(
    'Select cities to be analysed',
    df_merged.index,
    np.array(df_merged.index)
)

fig = px.bar(group_brand_df[group_brand_df['Code_commune'].isin(geo_filters)], x='Cn', y='Num Vehicles', hover_data=['Code_commune', 'Num Vehicles'])
fig.update_xaxes(range=(-.5,15))
df_merged = df_merged[df_merged.index.isin(geo_filters)]
fig_map = px.choropleth_mapbox(df_merged, geojson = df_merged['geometry'], color='Num Vehicles', locations=df_merged.index, mapbox_style="carto-positron", zoom=4, center = {"lat": 47, "lon": 2}, color_continuous_scale='Greys')

col1, col2 = st.columns([1, 1.5])

with col1:
    st.plotly_chart(fig)
with col2:    
    st.plotly_chart(fig_map)


st.markdown(
    """
    ## Vehicle Age
    """
)

df['Age']= current_year - df['Year']
group_age_df = df.groupby(['Age', 'Mh', 'Cn']).count().iloc[:, :1].rename(columns={'Country':'Num Vehicles'})
group_age_df.reset_index(['Mh', 'Cn'], inplace=True)
group_age_df.sort_values('Num Vehicles', inplace=True, ascending=False)

col1, col2, col3 = st.columns([2,2,1])

with col1:
    brand_filters = st.multiselect(
        'Select brands to be analysed',
        group_age_df['Mh'].unique(),
        ['RENAULT', 'VOLKSWAGEN', 'FIAT GROUP']
    )

with col2:
    min_age, max_age = st.select_slider(
                        'Select vehicle age range',
                        options = np.array([i for i in range(1, 20)]),
                        value = [1, 15]
                        )   

group_age_df = group_age_df[group_age_df['Mh'].isin(brand_filters)]
group_age_df = group_age_df[(group_age_df.index>min_age) & (group_age_df.index<max_age)]
group_commune_df_filtered = df[df['Mh'].isin(brand_filters)]
group_commune_df_filtered = df[(df.Age>min_age) & (df.Age<max_age)]
group_commune_df_filtered = group_commune_df_filtered.groupby(by = 'Code_commune').count().iloc[:,:1].rename(columns = {'Country': 'Num Vehicles'})
df_merged = map_df.merge(group_commune_df_filtered, left_index=True, right_index=True).sort_values(by='Num Vehicles', ascending=False)    

with col3:
    st.metric('Number of Vehicles Selected', group_commune_df_filtered['Num Vehicles'].sum())

col1, col2 = st.columns([1,1])

with col1:
    st.plotly_chart(
        px.bar(group_age_df, y='Num Vehicles', hover_data=['Mh', 'Cn'])
    )

with col2:
    st.plotly_chart(
        px.choropleth_mapbox(df_merged, geojson = df_merged['geometry'], color='Num Vehicles', locations=df_merged.index, mapbox_style="carto-positron", zoom=4, center = {"lat": 47, "lon": 2}, color_continuous_scale='Greys') 
    )

st.markdown(
    """
    A preview for the dataset produced here
    """
)

df

@st.cache
def convert_df(df):
    return df.to_csv().encode('utf-8')

csv = convert_df(df)


st.write("which can be downloaded")
st.download_button("here", csv, mime='text/csv', file_name='vehicle_list_TM.csv')
